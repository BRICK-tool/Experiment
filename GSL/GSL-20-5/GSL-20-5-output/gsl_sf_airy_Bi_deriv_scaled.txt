[runlim] version:		1.7
[runlim] time limit:		300 seconds
[runlim] real time limit:	311040000 seconds
[runlim] space limit:		4096 MB
[runlim] argv[0]:		./BRICK
[runlim] argv[1]:		gsl_sf.c
[runlim] argv[2]:		-f
[runlim] argv[3]:		gsl_sf_airy_Bi_deriv_scaled
[runlim] argv[4]:		-b
[runlim] argv[5]:		20
[runlim] argv[6]:		-d
[runlim] start:			Thu May 26 15:37:47 2016
[runlim] main pid:		3682
gsl_sf.c:24094:54: warning: taking the absolute value of unsigned type 'unsigned int' has no effect [-Wabsolute-value]
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^
gsl_sf.c:24094:54: note: remove the call to 'fabs' since unsigned values cannot be negative
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^~~~
gsl_sf.c:26149:44: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^
gsl_sf.c:26149:44: note: use function 'abs' instead
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^~~~
                                           abs
gsl_sf.c:26180:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^
gsl_sf.c:26180:45: note: use function 'abs' instead
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^~~~
                                            abs
gsl_sf.c:26203:24: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        result->err *= fabs(a-b)+1.0;
                       ^
gsl_sf.c:26203:24: note: use function 'abs' instead
        result->err *= fabs(a-b)+1.0;
                       ^~~~
                       abs
gsl_sf.c:26232:40: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^
gsl_sf.c:26232:40: note: use function 'abs' instead
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^~~~
                                       abs
gsl_sf.c:26259:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26259:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26315:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26315:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:28752:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^
gsl_sf.c:28752:38: note: use function 'abs' instead
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^~~~
                                     abs
gsl_sf.c:29166:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^
gsl_sf.c:29166:45: note: use function 'abs' instead
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^~~~
                                            abs
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29218:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^
gsl_sf.c:29218:38: note: use function 'abs' instead
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^~~~
                                     abs
gsl_sf.c:29252:39: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^
gsl_sf.c:29252:39: note: use function 'abs' instead
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^~~~
                                      abs
gsl_sf.c:29303:35: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^
gsl_sf.c:29303:35: note: use function 'abs' instead
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^~~~
                                  abs
gsl_sf.c:29347:48: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^
gsl_sf.c:29347:48: note: use function 'abs' instead
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^~~~
                                               abs
gsl_sf.c:29413:49: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^
gsl_sf.c:29413:49: note: use function 'abs' instead
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^~~~
                                                abs
gsl_sf.c:29744:57: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^
gsl_sf.c:29744:57: note: use function 'abs' instead
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^~~~
                                                        abs
gsl_sf.c:29781:52: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^
gsl_sf.c:29781:52: note: use function 'abs' instead
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^~~~
                                                   abs
gsl_sf.c:32897:67: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^
gsl_sf.c:32897:67: note: use function 'abs' instead
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^~~~
                                                                  abs
gsl_sf.c:33926:46: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^
gsl_sf.c:33926:46: note: use function 'abs' instead
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^~~~
                                             abs
gsl_sf.c:33941:47: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^
gsl_sf.c:33941:47: note: use function 'abs' instead
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^~~~
                                              abs
31 warnings generated.
<gsl_sf.c> 
opt -load buildCFG.so -buildCFG -bound=20 -pre=0.01 -mode=2 -func=gsl_sf_airy_Bi_deriv_scaled <gsl_sf.bc>gsl_sfbuildCFG.bc
START CHECK FUNCTION <gsl_sf_airy_Bi_deriv_scaled> in precision 1.000000e-02~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CheckMode: 2
Check div-0 and domain error only
Warning: There is no main function in the Module!
[runlim] sample:		9.3 seconds, 62.5 MB
#BUILDCFG Time: 	11699ms
MainFunc: gsl_sf_airy_Bi_deriv_scaled
#CallDepth: 14
#Loc: 148
#targetsize:	27
target[0]:q0(5)
target[1]:q1(8)
target[2]:q2(19)
target[3]:q3(31)
target[4]:q4(34)
target[5]:q5(45)
target[6]:q6(57)
target[7]:q7(60)
target[8]:q8(71)
target[9]:q9(84)
target[10]:q10(86)
target[11]:q11(88)
target[12]:q12(90)
target[13]:q13(96)
target[14]:q14(107)
target[15]:q15(118)
target[16]:q16(123)
target[17]:q17(126)
target[18]:q18(137)
target[19]:q19(149)
target[20]:q20(151)
target[21]:q21(153)
target[22]:q22(156)
target[23]:q23(167)
target[24]:q24(169)
target[25]:q25(171)
target[26]:q26(174)

target[0]:q0(5)
[runlim] sample:		19.3 seconds, 1285.4 MB
[runlim] sample:		29.3 seconds, 2276.7 MB
[runlim] sample:		39.3 seconds, 3444.3 MB
[runlim] end:			Thu May 26 15:38:30 2016
[runlim] status:		out of memory
[runlim] result:		1
[runlim] children:		866
[runlim] real:			43.38 seconds
[runlim] time:			42.31 seconds
[runlim] space:			4100.2 MB
[runlim] samples:		430
Killed
