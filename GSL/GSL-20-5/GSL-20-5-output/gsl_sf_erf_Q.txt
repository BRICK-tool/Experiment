[runlim] version:		1.7
[runlim] time limit:		300 seconds
[runlim] real time limit:	311040000 seconds
[runlim] space limit:		2048 MB
[runlim] argv[0]:		./BRICK
[runlim] argv[1]:		gsl_sf.c
[runlim] argv[2]:		-f
[runlim] argv[3]:		gsl_sf_erf_Q
[runlim] argv[4]:		-b
[runlim] argv[5]:		20
[runlim] argv[6]:		-d
[runlim] start:			Thu May 26 20:20:42 2016
[runlim] main pid:		2362
gsl_sf.c:24094:54: warning: taking the absolute value of unsigned type 'unsigned int' has no effect [-Wabsolute-value]
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^
gsl_sf.c:24094:54: note: remove the call to 'fabs' since unsigned values cannot be negative
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^~~~
gsl_sf.c:26149:44: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^
gsl_sf.c:26149:44: note: use function 'abs' instead
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^~~~
                                           abs
gsl_sf.c:26180:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^
gsl_sf.c:26180:45: note: use function 'abs' instead
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^~~~
                                            abs
gsl_sf.c:26203:24: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        result->err *= fabs(a-b)+1.0;
                       ^
gsl_sf.c:26203:24: note: use function 'abs' instead
        result->err *= fabs(a-b)+1.0;
                       ^~~~
                       abs
gsl_sf.c:26232:40: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^
gsl_sf.c:26232:40: note: use function 'abs' instead
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^~~~
                                       abs
gsl_sf.c:26259:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26259:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26315:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26315:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:28752:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^
gsl_sf.c:28752:38: note: use function 'abs' instead
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^~~~
                                     abs
gsl_sf.c:29166:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^
gsl_sf.c:29166:45: note: use function 'abs' instead
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^~~~
                                            abs
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29218:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^
gsl_sf.c:29218:38: note: use function 'abs' instead
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^~~~
                                     abs
gsl_sf.c:29252:39: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^
gsl_sf.c:29252:39: note: use function 'abs' instead
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^~~~
                                      abs
gsl_sf.c:29303:35: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^
gsl_sf.c:29303:35: note: use function 'abs' instead
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^~~~
                                  abs
gsl_sf.c:29347:48: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^
gsl_sf.c:29347:48: note: use function 'abs' instead
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^~~~
                                               abs
gsl_sf.c:29413:49: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^
gsl_sf.c:29413:49: note: use function 'abs' instead
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^~~~
                                                abs
gsl_sf.c:29744:57: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^
gsl_sf.c:29744:57: note: use function 'abs' instead
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^~~~
                                                        abs
gsl_sf.c:29781:52: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^
gsl_sf.c:29781:52: note: use function 'abs' instead
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^~~~
                                                   abs
gsl_sf.c:32897:67: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^
gsl_sf.c:32897:67: note: use function 'abs' instead
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^~~~
                                                                  abs
gsl_sf.c:33926:46: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^
gsl_sf.c:33926:46: note: use function 'abs' instead
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^~~~
                                             abs
gsl_sf.c:33941:47: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^
gsl_sf.c:33941:47: note: use function 'abs' instead
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^~~~
                                              abs
31 warnings generated.
<gsl_sf.c> 
opt -load buildCFG.so -buildCFG -bound=20 -pre=0.01 -mode=2 -func=gsl_sf_erf_Q <gsl_sf.bc>gsl_sfbuildCFG.bc
START CHECK FUNCTION <gsl_sf_erf_Q> in precision 1.000000e-02~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CheckMode: 2
Check div-0 and domain error only
Warning: There is no main function in the Module!
#BUILDCFG Time: 	4560.21ms
MainFunc: gsl_sf_erf_Q
#CallDepth: 7
#Loc: 132
#targetsize:	5
target[0]:q0(5)
target[1]:q1(15)
target[2]:q2(24)
target[3]:q3(27)
target[4]:q4(45)

target[0]:q0(5)
[runlim] sample:		9.3 seconds, 470.0 MB
target[0]:from s0(0) to q0(5)
at line 15102 is unreachable under bound 20 when check=
Number of path checked:30
#Avg_var: 1.740333e+02
#Avg_nolinearop: 3.566667e+00
Dreal Time: 	6878.02ms

target[1]:q1(15)
target[1]:from s0(0) to q1(15)
at line 15102 is unreachable under bound 20 when check=
Number of path checked:60
#Avg_var: 1.740333e+02
#Avg_nolinearop: 3.566667e+00
Dreal Time: 	13676ms

target[2]:q2(24)
[runlim] sample:		19.3 seconds, 1902.1 MB
[runlim] end:			Thu May 26 20:21:04 2016
[runlim] status:		out of memory
[runlim] result:		1
[runlim] children:		452
[runlim] real:			22.35 seconds
[runlim] time:			21.61 seconds
[runlim] space:			2069.2 MB
[runlim] samples:		223
target[2]:from s0(0) to q2(24)
at line 19393 is unreachable under bound 20 when check=
Number of path checked:90
#Avg_var: 1.740333e+02
#Avg_nolinearop: 3.566667e+00
Dreal Time: 	21696.3ms

target[3]:q3(27)
target[3]:from s0(0) to q3(27)
at line 15102 is unreachable under bound 20 when check=
Number of path checked:120
#Avg_var: 1.740333e+02
#Avg_nolinearop: 3.566667e+00
Dreal Time: 	30190.8ms

target[4]:q4(45)
target[4]:from s0(0) to q4(45)
at line 19191 is unreachable under bound 20 when check=
Number of path checked:150
#Avg_var: 1.740333e+02
#Avg_nolinearop: 3.566667e+00
Dreal Time: 	38313.5ms

bound:	20	precision:	1.000000e-02	functionName:	gsl_sf_erf_Q	check:	
#Dreal Time: 	38.3135s
#CPU Time: 42.736 s
#Memory used: 4298.00 MB
While deleting: [6 x double]* %erfc8_sum.P
Use still stuck around after Def is destroyed:@erfc8_sum.P = internal global [6 x double] <null operand!>, align 16
opt: Value.cpp:80: virtual llvm::Value::~Value(): Assertion `use_empty() && "Uses remain when a value is destroyed!"' failed.
0  opt             0x00000000016128d2 llvm::sys::PrintStackTrace(_IO_FILE*) + 34
1  opt             0x00000000016124f4
2  libpthread.so.0 0x00007f1f5c5d5340
3  libc.so.6       0x00007f1f5b803cc9 gsignal + 57
4  libc.so.6       0x00007f1f5b8070d8 abort + 328
5  libc.so.6       0x00007f1f5b7fcb86
6  libc.so.6       0x00007f1f5b7fcc32
7  opt             0x00000000015c6dbf
8  opt             0x000000000157b620
9  opt             0x00000000015ad39d llvm::Module::~Module() + 109
10 opt             0x00000000005deabf main + 1087
11 libc.so.6       0x00007f1f5b7eeec5 __libc_start_main + 245
12 opt             0x000000000060256a
Stack dump:
0.	Program arguments: opt -load buildCFG.so -buildCFG -bound=20 -pre=0.01 -mode=2 -func=gsl_sf_erf_Q 
Aborted (core dumped)
