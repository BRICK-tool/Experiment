[runlim] version:		1.7
[runlim] time limit:		300 seconds
[runlim] real time limit:	311040000 seconds
[runlim] space limit:		2048 MB
[runlim] argv[0]:		./BRICK
[runlim] argv[1]:		gsl_sf.c
[runlim] argv[2]:		-f
[runlim] argv[3]:		gsl_sf_ellint_F
[runlim] argv[4]:		-b
[runlim] argv[5]:		20
[runlim] argv[6]:		-d
[runlim] start:			Thu May 26 20:13:27 2016
[runlim] main pid:		2412
gsl_sf.c:24094:54: warning: taking the absolute value of unsigned type 'unsigned int' has no effect [-Wabsolute-value]
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^
gsl_sf.c:24094:54: note: remove the call to 'fabs' since unsigned values cannot be negative
        result->err = 2.0 * GSL_DBL_EPSILON * prod * fabs(n-m);
                                                     ^~~~
gsl_sf.c:26149:44: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^
gsl_sf.c:26149:44: note: use function 'abs' instead
    result->err = 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ma/Mn);
                                           ^~~~
                                           abs
gsl_sf.c:26180:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^
gsl_sf.c:26180:45: note: use function 'abs' instead
    result->err += 4.0 * GSL_DBL_EPSILON * (fabs(b-a)+1.0) * fabs(result->val);
                                            ^~~~
                                            abs
gsl_sf.c:26203:24: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        result->err *= fabs(a-b)+1.0;
                       ^
gsl_sf.c:26203:24: note: use function 'abs' instead
        result->err *= fabs(a-b)+1.0;
                       ^~~~
                       abs
gsl_sf.c:26232:40: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^
gsl_sf.c:26232:40: note: use function 'abs' instead
      result->err  = fabs(Mn) * (1.0 + fabs(a)) * fabs(r_Mn.err / r_Mn.val);
                                       ^~~~
                                       abs
gsl_sf.c:26259:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26259:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26315:22: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err *= fabs(b-a)+1.0;
                     ^
gsl_sf.c:26315:22: note: use function 'abs' instead
      result->err *= fabs(b-a)+1.0;
                     ^~~~
                     abs
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:41: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26959:68: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26959:68: note: use function 'abs' instead
  else if(x > 100.0  && GSL_MAX_DBL(1.0,fabs(b-a))*GSL_MAX_DBL(1.0,fabs(1-a)) < 0.5 * x) {
                                                                   ^~~~
                                                                   abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:41: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:41: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                        ^~~~
                                        abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:30: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                             ^
gsl_sf.c:26963:66: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:26963:66: note: use function 'abs' instead
  else if(x < -100.0 && GSL_MAX_DBL(1.0,fabs(a))*GSL_MAX_DBL(1.0,fabs(1+a-b)) < 0.5 * fabs(x)) {
                                                                 ^~~~
                                                                 abs
gsl_sf.c:117:38: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                     ^
gsl_sf.c:113:42: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                         ^
gsl_sf.c:28752:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^
gsl_sf.c:28752:38: note: use function 'abs' instead
    result->err += fabs(poch.val) * (fabs(N) + 2.0) * GSL_DBL_EPSILON * fabs(sum_val);
                                     ^~~~
                                     abs
gsl_sf.c:29166:45: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^
gsl_sf.c:29166:45: note: use function 'abs' instead
    result->err  = 2.0 * GSL_DBL_EPSILON * (fabs(b) + fabs(x));
                                            ^~~~
                                            abs
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:24: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                       ^
gsl_sf.c:29176:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(ASYMP_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29176:11: note: use function 'abs' instead
gsl_sf.c:28506:43: note: expanded from macro 'ASYMP_EVAL_OK'
#define ASYMP_EVAL_OK(a,b,x) (GSL_MAX_DBL(fabs(a),1.0)*GSL_MAX_DBL(fabs(1.0+a-b),1.0) < 0.99*fabs(x))
                                          ^
gsl_sf.c:117:36: note: expanded from macro 'GSL_MAX_DBL'
#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
                                   ^
gsl_sf.c:113:36: note: expanded from macro 'GSL_MAX'
#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
                                   ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:33: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                ^
gsl_sf.c:29186:11: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
  else if(SERIES_EVAL_OK(a,b,x)) {
          ^
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29186:11: note: use function 'abs' instead
gsl_sf.c:28504:70: note: expanded from macro 'SERIES_EVAL_OK'
#define SERIES_EVAL_OK(a,b,x) ((fabs(a) < 5 && b < 5 && x < 2.0) || (fabs(a) <  10 && b < 10 && x < 1.0))
                                                                     ^
gsl_sf.c:29218:38: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^
gsl_sf.c:29218:38: note: use function 'abs' instead
    y.err = 4.0 * GSL_DBL_EPSILON * (fabs(a)+1.0) * fabs(Ua);
                                     ^~~~
                                     abs
gsl_sf.c:29252:39: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^
gsl_sf.c:29252:39: note: use function 'abs' instead
    y.err += 2.0 * GSL_DBL_EPSILON * (fabs(a) + 1.0) * fabs(Ua);
                                      ^~~~
                                      abs
gsl_sf.c:29303:35: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^
gsl_sf.c:29303:35: note: use function 'abs' instead
        double oUa_err   = 2.0 * (fabs(a_target-a) + CF1_count + 1.0) * GSL_DBL_EPSILON * fabs(1.0/Ua);
                                  ^~~~
                                  abs
gsl_sf.c:29347:48: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^
gsl_sf.c:29347:48: note: use function 'abs' instead
        Ua1_bck_err = 2.0 * GSL_DBL_EPSILON * (fabs(a1-a)+CF1_count+1.0) * fabs(Ua);
                                               ^~~~
                                               abs
gsl_sf.c:29413:49: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^
gsl_sf.c:29413:49: note: use function 'abs' instead
        Ua1_for_err += 2.0 * GSL_DBL_EPSILON * (fabs(a1-a0)+1.0) * fabs(Ua1_for_val);
                                                ^~~~
                                                abs
gsl_sf.c:29744:57: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^
gsl_sf.c:29744:57: note: use function 'abs' instead
      lnm.err = 2.0 * GSL_DBL_EPSILON * (fabs(lm_for) + fabs(scale_count_for - scale_count_bck)*fabs(lnscale));
                                                        ^~~~
                                                        abs
gsl_sf.c:29781:52: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^
gsl_sf.c:29781:52: note: use function 'abs' instead
      double ln_pre_err = 2.0 * GSL_DBL_EPSILON * (fabs(b)+1.0) * fabs(ln_x);
                                                   ^~~~
                                                   abs
gsl_sf.c:32897:67: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^
gsl_sf.c:32897:67: note: use function 'abs' instead
    lnpre_err = 0.25*M_LNPI*GSL_DBL_EPSILON + 0.5 * (lnpoch.err + fabs(m)*lncirc.err);
                                                                  ^~~~
                                                                  abs
gsl_sf.c:33926:46: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^
gsl_sf.c:33926:46: note: use function 'abs' instead
      result->err = 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                             ^~~~
                                             abs
gsl_sf.c:33941:47: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^
gsl_sf.c:33941:47: note: use function 'abs' instead
      result->err += 2.0 * GSL_DBL_EPSILON * (fabs(incr) + 1.0) * fabs(result->val);
                                              ^~~~
                                              abs
31 warnings generated.
<gsl_sf.c> 
opt -load buildCFG.so -buildCFG -bound=20 -pre=0.01 -mode=2 -func=gsl_sf_ellint_F <gsl_sf.bc>gsl_sfbuildCFG.bc
START CHECK FUNCTION <gsl_sf_ellint_F> in precision 1.000000e-02~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CheckMode: 2
Check div-0 and domain error only
Warning: There is no main function in the Module!
#BUILDCFG Time: 	1539.29ms
MainFunc: gsl_sf_ellint_F
#CallDepth: 4
#Loc: 66
#targetsize:	3
target[0]:q0(24)
target[1]:q1(26)
target[2]:q2(28)

target[0]:q0(24)
0  opt             0x0000000001697232 llvm::sys::PrintStackTrace(_IO_FILE*) + 34
1  opt             0x0000000001696ad4
2  libpthread.so.0 0x00007fa3b88af340
3  libc.so.6       0x00007fa3b7adcf79 gsignal + 57
4  libc.so.6       0x00007fa3b7ae0388 abort + 328
5  libc.so.6       0x00007fa3b7b1a1d4
6  libc.so.6       0x00007fa3b7bb1b2c __fortify_fail + 92
7  libc.so.6       0x00007fa3b7bb09f0
8  libc.so.6       0x00007fa3b7bafef9
9  libc.so.6       0x00007fa3b7b2254c _IO_default_xsputn + 188
10 libc.so.6       0x00007fa3b7af6dd9 __printf_fp + 6217
11 libc.so.6       0x00007fa3b7af4a43 _IO_vfprintf + 19107
12 libc.so.6       0x00007fa3b7baff84 __vsprintf_chk + 132
13 libc.so.6       0x00007fa3b7bafedd __sprintf_chk + 125
14 libdreal.so     0x00007fa3b750bf9e Egraph::mkNum(double) + 78
15 buildCFG.so     0x00007fa3b7889a63
16 buildCFG.so     0x00007fa3b788bfec
17 buildCFG.so     0x00007fa3b788c92d
18 buildCFG.so     0x00007fa3b788d199
19 buildCFG.so     0x00007fa3b788d435
20 buildCFG.so     0x00007fa3b788d646
21 buildCFG.so     0x00007fa3b788d646
22 buildCFG.so     0x00007fa3b788dac6
23 buildCFG.so     0x00007fa3b7894159
24 buildCFG.so     0x00007fa3b788e785
25 opt             0x000000000161a457 llvm::FPPassManager::doInitialization(llvm::Module&) + 87
26 opt             0x0000000001624167 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 391
27 opt             0x0000000000617fbd main + 2813
28 libc.so.6       0x00007fa3b7ac7ec5 __libc_start_main + 245
29 opt             0x000000000063b78a
Stack dump:
0.	Program arguments: opt -load buildCFG.so -buildCFG -bound=20 -pre=0.01 -mode=2 -func=gsl_sf_ellint_F 
Aborted (core dumped)
[runlim] end:			Thu May 26 20:13:30 2016
[runlim] status:		ok
[runlim] result:		0
[runlim] children:		78
[runlim] real:			4.00 seconds
[runlim] time:			2.91 seconds
[runlim] space:			60.2 MB
[runlim] samples:		36
